import os
import shutil
from pathlib import Path
from typing import Any, ClassVar, Optional
from utils.dir import get_utils_dir
from utils.click import click
from utils.log import get_level, LOG_FORMAT
import logging
import subprocess
from dataclasses import dataclass
from enum import EnumType, StrEnum
from halo import Halo
import distro
import requests

__all__ = ["list_cmd", "error", "add_utility", "remove_utility"]

logging.basicConfig(level=get_level(), format=LOG_FORMAT)
log = logging.getLogger(__name__)


def list_cmd() -> None:
    """'list' or 'ls' command implementation."""
    log.debug("Getting utilities directory.")
    utils_path = get_utils_dir()
    log.debug("Iterating over the utilities directory.")
    for item in utils_path.glob("**/*", recurse_symlinks=True):
        log.debug(f"Checking item: {item}")
        if item.is_file(follow_symlinks=True) and os.access(
            item, mode=os.X_OK | os.R_OK, follow_symlinks=True
        ):
            click.echo(
                click.style(
                    click.format_filename(item, shorten=True), fg="cyan", bold=True
                )
            )
    click.echo()


def error(message: str) -> str:
    """Print an error message and exit."""
    return f"{click.style('ERROR:', fg='red', bold=True)} {message}"


def add_utility(utility: Path, copy: bool, update: bool) -> None:
    """'add' and 'install' command implementation."""
    log.debug(f"Adding utility: {utility}")
    log.debug("Getting utilities directory.")
    utils_path = get_utils_dir()
    new_name = utility.stem.replace("_", "-").lower()
    new_path = utils_path / new_name
    log.debug(f"New utility path: {new_path}")
    if new_path.exists():
        log.debug(f"Utility already exists: {new_path}")
        if update:
            os.remove(new_path)
        else:
            raise click.ClickException(
                error(
                    f"{click.format_filename(new_name, shorten=True)} already exists in the utilities directory.",
                )
            )
    utility = utility.resolve()
    log.debug(f"Resolved utility path: {utility}")
    log.debug(f"{'Copying' if copy else 'Moving'} utility {utility} to {new_path}")
    if copy:
        shutil.copy2(utility, new_path)
    else:
        utility = utility.replace(new_path)
    utility.chmod(0o755)
    echo = click.style(
        "Added utility ",
        fg="cyan",
    )
    echo += click.style(
        click.format_filename(utility, shorten=True), fg="magenta", bold=True
    )
    echo += click.style(" to the utilities directory.", fg="cyan")
    click.echo(echo)
    cmd = click.style(click.format_filename(utility, shorten=True), fg="cyan")
    click.echo(
        f"You can now run it with: '{cmd} {click.style('...args', fg='yellow')}'"
    )
    click.echo()


def remove_utility(utility: str) -> None:
    """'remove', 'rm', or 'uninstall' command implementation."""
    log.debug(f"Removing utility: {utility}")
    log.debug("Getting utilities directory.")
    utils_path = get_utils_dir()
    utility_path = utils_path / utility.replace("-", "_").lower()
    log.debug(f"Removing utility at path: {utility_path}")
    os.remove(utility_path)
    echo = click.style(
        "Removed utility ",
        fg="cyan",
    )
    echo += click.style(
        click.format_filename(utility_path, shorten=True), fg="magenta", bold=True
    )
    echo += click.style(" from the utilities directory.", fg="cyan")
    click.echo(echo)
    click.echo()


class Meta(EnumType):
    def __repr__(cls):
        return ", ".join(cls.ls())

    def __str__(cls):
        return ", ".join(cls.ls())

    def ls(cls) -> list[str]:
        """List all members of the enumeration."""
        return [str(member) for member in cls.__members__.values()]


class StrEnumUtil(StrEnum, metaclass=Meta):
    """Base class for string enumerations with custom __repr__ and __str__ methods."""


class UtilityType(StrEnumUtil, click.ParamType):
    """Enumeration for utility types."""

    name: ClassVar[str] = "UtilityType"

    RUST = "rust"
    GO = "go"
    C = "c"
    CPP = "cpp"
    FORTRAN = "fortran"
    MAKE = "make"
    CMAKE = "cmake"
    AUTOCONF = "autoconf"

    @classmethod
    def convert(
        cls, value: Any, param: Optional[click.Parameter], ctx: Optional[click.Context]
    ) -> "UtilityType":
        """Convert the value to a UtilityType."""
        if isinstance(value, cls):
            return value
        try:
            return cls(value.lower())
        except ValueError:
            raise click.BadParameter(
                f"Invalid utility type: {value}. Supported types are: {cls.ls()}"
            ) from None


class Compilers(StrEnumUtil):
    """Enumeration for compiler types."""

    GCC = "gcc"
    GPP = "g++"
    GFORTRAN = "gfortran"
    MAKE = "make"
    CMAKE = "cmake"
    RUST = "cargo"
    GO = "go"
    CONF = "autoconf"


@dataclass
class CompilerCommand:
    """TypedDict for compiler command structure."""

    command: list[list[str]]
    output: Optional[Path] = None
    compiler: Compilers


def get_compiler_install_cmd(compiler: Compilers) -> list[str]:
    """Get the installation command based on the current OS."""
    log.debug("Determining installation command based on OS.")
    match distro.id():
        case "debian" | "ubuntu" | "linuxmint" | "pop":
            match compiler:
                case Compilers.RUST:
                    return [
                        "https://sh.rustup.rs",
                    ]
                case Compilers.GCC | Compilers.GPP:
                    return ["sudo", "apt-get", "install", "-y", "build-essential"]
                case Compilers.GO:
                    return ["sudo", "apt-get", "install", "-y", "golang-go"]
                case Compilers.GFORTRAN:
                    return ["sudo", "apt-get", "install", "-y", "gfortran"]
                case Compilers.MAKE | Compilers.CMAKE | Compilers.CONF:
                    return ["sudo", "apt-get", "install", "-y", compiler.value]
        case "fedora" | "centos" | "rhel" | "rocky" | "alma":
            match compiler:
                case Compilers.RUST:
                    return [
                        "https://sh.rustup.rs",
                    ]
                case Compilers.GCC | Compilers.GPP:
                    return ["sudo", "dnf", "groupinstall", "-y", "Development Tools"]
                case Compilers.GO:
                    return ["sudo", "dnf", "install", "-y", "golang"]
                case Compilers.GFORTRAN:
                    return ["sudo", "dnf", "install", "-y", "gcc-gfortran"]
                case Compilers.MAKE | Compilers.CMAKE | Compilers.CONF:
                    return ["sudo", "dnf", "install", "-y", compiler.value]
        case "arch" | "manjaro" | "endeavouros":
            match compiler:
                case Compilers.RUST:
                    return [
                        "https://sh.rustup.rs",
                    ]
                case Compilers.GCC | Compilers.GPP:
                    return ["sudo", "pacman", "-Sy", "base-devel"]
                case Compilers.GFORTRAN:
                    return ["sudo", "pacman", "-Sy", "gcc-fortran"]
                case Compilers.MAKE | Compilers.CMAKE | Compilers.GO | Compilers.CONF:
                    return ["sudo", "pacman", "-Sy", compiler.value]
        case "opensuse" | "sles" | "sle":
            match compiler:
                case Compilers.RUST:
                    return [
                        "https://sh.rustup.rs",
                    ]
                case (
                    Compilers.GCC
                    | Compilers.GO
                    | Compilers.MAKE
                    | Compilers.CMAKE
                    | Compilers.CONF
                ):
                    return ["sudo", "zypper", "install", "-y", compiler.value]
                case Compilers.GPP:
                    return ["sudo", "zypper", "install", "-y", "gcc-c++"]
                case Compilers.GFORTRAN:
                    return ["sudo", "zypper", "install", "-y", "gcc-fortran"]
        case "macos" | "osx" | "darwin":
            match compiler:
                case Compilers.RUST:
                    return [
                        "https://sh.rustup.rs",
                    ]
                case Compilers.GCC | Compilers.GPP | Compilers.GFORTRAN:
                    return ["brew", "install", "gcc"]
                case Compilers.GO | Compilers.MAKE | Compilers.CMAKE | Compilers.CONF:
                    return ["brew", "install", compiler.value]
        case _:
            raise click.ClickException(
                error("Unsupported operating system for installation.")
            )


def install_rust() -> None:
    """Install Rust using rustup."""
    log.debug("Installing Rust using rustup.")
    script = requests.get("https://sh.rustup.rs", allow_redirects=True)
    if script.status_code != 200:
        raise click.ClickException(
            error("Failed to download the Rust installation script.")
        )
    try:
        subprocess.run(
            ["sh", "-c", script.text],
            check=True,
            text=True,
            stdout=subprocess.STD_OUTPUT_HANDLE,
            stderr=subprocess.STD_ERROR_HANDLE,
            stdin=subprocess.STD_INPUT_HANDLE,
        )
        click.echo(click.style("Rustup installed successfully.", fg="green", bold=True))
    except subprocess.CalledProcessError as exc:
        raise click.ClickException(
            error(f"Failed to install Rust: {exc.output}")
        ) from exc


def compiler_install(compiler: Compilers) -> None:
    """Install the specified compiler."""
    if compiler == Compilers.RUST:
        install_rust()
        return
    cmd = get_compiler_install_cmd(compiler)
    try:
        subprocess.run(
            cmd,
            check=True,
            text=True,
            stdout=subprocess.STD_OUTPUT_HANDLE,
            stderr=subprocess.STD_ERROR_HANDLE,
            stdin=subprocess.STD_INPUT_HANDLE,
        )
        click.echo(
            click.style(f"{compiler} installed successfully.", fg="green", bold=True)
        )
    except subprocess.CalledProcessError as exc:
        raise click.ClickException(
            error(f"Failed to install {compiler}: {exc.output}")
        ) from exc


def install_compiler(compiler: Compilers) -> None:
    """Install the specified compiler if not already installed."""
    log.debug(f"Installing compiler: {compiler}")
    if shutil.which(compiler):
        click.echo(
            click.style(f"{compiler} is already installed.", fg="green", bold=True)
        )
        return
    else:
        click.echo(
            click.style(
                f"{compiler} is not installed. Attempting to install it...",
                fg="yellow",
                bold=True,
            )
        )
        compiler_install(compiler)


def handle_make_type(util_type: UtilityType, path: Path) -> CompilerCommand:
    """Get the make type for the given C/CPP utility type."""
    log.debug(f"Getting make type for C/CPP utility: {util_type}")
    match util_type:
        case UtilityType.MAKE:
            return CompilerCommand(
                command=[["make", f"-j{os.cpu_count()}"]],
                compiler=Compilers.GCC,
            )
        case UtilityType.CMAKE:
            return CompilerCommand(
                command=[
                    [
                        "cmake",
                        "--build=.",
                        f"--parallel={os.cpu_count()}",
                    ],
                    [
                        "cmake",
                        "--install=.",
                        "--prefix=output",
                        f"--parallel={os.cpu_count()}",
                        "--strip",
                    ],
                ],
                output=path / "output" / path.stem,
                compiler=Compilers.GCC,
            )
        case UtilityType.AUTOCONF:
            log.debug("Using configure script for C/CPP utility.")
            return CompilerCommand(
                command=[
                    ["./configure", "--prefix=output"],
                    ["make", f"-j{os.cpu_count()}"],
                ],
                output=path / "output" / path.stem,
                compiler=Compilers.CONF,
            )
        case _:
            raise click.ClickException(
                error(
                    message=f"{click.style('Unsupported compiled utility:', fg='yellow', bold=True)} {click.style(util_type, fg='red', bold=True)}\nSupported compiled languages are: {UtilityType}."
                )
            )


def handle_raw_compiler_command(util_type: UtilityType, path: Path) -> CompilerCommand:
    """Get the raw compiler command for the given utility type."""
    log.debug(f"Getting raw compiler command for utility type: {util_type}")
    match util_type:
        case UtilityType.C:
            return CompilerCommand(
                command=[
                    [
                        "gcc",
                        "-W all",
                        "-W extra",
                        "-f PIC",
                        "-I .",
                        f"-o output/{path.stem}",
                    ],
                ],
                output=path.parent / Path("output") / path.stem,
                compiler=Compilers.GCC,
            )
        case UtilityType.CPP:
            return CompilerCommand(
                command=[
                    [
                        "g++",
                        "-W all",
                        "-W extra",
                        "-f PIC",
                        "-I .",
                        f"-o output/{path.stem}",
                    ]
                ],
                output=path.parent / "output" / path.stem,
                compiler=Compilers.GPP,
            )
        case UtilityType.FORTRAN:
            return CompilerCommand(
                command=[
                    [
                        "gfortran",
                        "-W all",
                        "-W extra",
                        "-f PIC",
                        "-I .",
                        f"-o output/{path.stem}",
                    ]
                ],
                output=path.parent / "output" / path.stem,
                compiler=Compilers.GFORTRAN,
            )
        case _:
            raise click.ClickException(
                error(
                    f"{click.style('Unsupported compiled utility:', fg='yellow', bold=True)} {click.style(util_type, fg='red', bold=True)}\nSupported compiled languages are: {UtilityType}."
                )
            )


def find_compiled_output(path: Path) -> Path:
    """Find the compiled output file in the given path."""
    log.debug(f"Finding compiled output in path: {path}")
    items: list[Path] = []
    for item in path.glob("**/*"):
        if item.is_file() and os.access(item, mode=os.X_OK | os.R_OK):
            log.debug(f"Found compiled output: {item}")
            items.append(item)
    if len(items) == 1:
        log.debug(f"Single compiled output found: {items[0]}")
        return items[0]
    if len(items) > 1:
        log.debug(f"Multiple compiled outputs found: {items}")
        for item in items:
            if item.stem == path.stem:
                log.debug(f"Returning output with matching stem: {item}")
                return item
    raise click.ClickException(
        error(
            f"No compiled output found in {click.format_filename(path, shorten=True)}."
        )
    )


def compiler_command(util_type: UtilityType, path: Path) -> CompilerCommand:
    """Get the compiler command for the given utility type."""
    log.debug(f"Getting compiler command for utility type: {util_type}")
    match util_type:
        case UtilityType.RUST:
            return CompilerCommand(
                command=[["cargo", "build", "--release", f"--jobs={os.cpu_count()}"]],
                output=path / "target" / "release" / path.stem,
                compiler=Compilers.RUST,
            )
        case UtilityType.GO:
            return CompilerCommand(
                command=[["go", "build", "-o output/", f"-p {os.cpu_count()}"]],
                output=path / "output" / path.stem,
                compiler=Compilers.GO,
            )
        case UtilityType.C | UtilityType.CPP | UtilityType.FORTRAN:
            return handle_raw_compiler_command(util_type, path)
        case UtilityType.MAKE | UtilityType.CMAKE | UtilityType.AUTOCONF:
            return handle_make_type(util_type, path)


def add_compiled_utility(utility: Path, util_type: UtilityType) -> None:
    """'add <language>' command implementation."""
    log.debug(f"Adding compiled utility: {utility}")
    comp_cmd = compiler_command(util_type, utility)
    halo = Halo(
        text="Installing compiler...",
        spinner="dots",
        animation="marquee",
        color="green",
    )
    halo.start()
    install_compiler(comp_cmd.compiler)
    halo.succeed("Compiler installed successfully!")
    for i, cmd in enumerate(comp_cmd.command):
        log.debug(f"Running command: {' '.join(cmd)}")
        halo = Halo(
            text=f"{click.style('Running:', fg='magenta')} {' '.join(cmd)}",
            spinner="dots",
            animation="marquee",
            color="green",
        )
        halo.start()
        try:
            subprocess.run(
                cmd,
                capture_output=True,
                shell=True,
                check=True,
                text=True,
                cwd=utility if utility.is_dir() else utility.parent,
            )
            msg = ""
            if i == len(comp_cmd.command) - 1:
                msg = "Compilation succeeded!"
            else:
                msg = f"Step {i + 1} of {len(comp_cmd.command)} completed successfully!"
            halo.succeed(msg)
        except subprocess.CalledProcessError as exc:
            halo.fail(
                f"{click.style('Compilation failed:', fg='red', bold=True)} {exc.cmd}"
            )
            raise click.ClickException(
                error(
                    f"Compilation failed with exit code {exc.returncode}:\n{exc.output}"
                )
            )
    if comp_cmd.output is None or not (
        comp_cmd.output is not None and comp_cmd.output.exists()
    ):
        comp_cmd.output = find_compiled_output(
            utility if utility.is_dir() else utility.parent
        )
    log.debug(f"Compiled output path: {comp_cmd.output}")
    if not comp_cmd.output.exists():
        raise click.ClickException(
            error(
                f"Compiled output {click.format_filename(comp_cmd.output, shorten=True)} does not exist."
            )
        )
    log.debug(f"Adding compiled utility to utilities directory: {comp_cmd.output}")
    add_utility(comp_cmd.output, copy=False, update=False)
